<?php

namespace AppBundle\Repository;
use AppBundle\Entity\CommunityCategory;
use UserBundle\Entity\User;

/**
 * CommunityQuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommunityQuestionRepository extends \Doctrine\ORM\EntityRepository
{
	const SORT_MOST_RECENT  = 'most_recent';
	const SORT_TOP_RATED  = 'top_rated';

	/**
	 * @param null   $category
	 * @param int    $offset
	 * @param int    $limit
	 * @param string $sort
	 *
	 * @return array
	 */
    public function findPaginated($category = null, $offset = 0, $limit = 10, $sort = self::SORT_MOST_RECENT)
    {
    	if ($sort === self::SORT_MOST_RECENT) {
			$query = $this->createQueryBuilder('q')
				->select('q')
				->where('q.communityCategory  = :category')
				->orderBy('q.created', 'DESC')
				->setParameter('category', $category)
				->getQuery()
				->setFirstResult($offset)
				->setMaxResults($limit);
	    } else {
		    $query = $this->createQueryBuilder('q')
				->select('q')
			    ->addSelect('SUM(votes.vote) AS HIDDEN totalVote')
			    ->leftJoin('q.votes', 'votes')
				->where('q.communityCategory  = :category')
				->orderBy('totalVote', 'DESC')
				->setParameter('category', $category)
			    ->addGroupBy('q.id')
				->getQuery()
				->setFirstResult($offset)
				->setMaxResults($limit);
	    }

	    return $query->getResult();
    }

    /**
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function findPaginatedByUser(User $user, $offset = 0, $limit = 10)
    {
        $query = $this->createQueryBuilder('q')
            ->select('q')
            ->where('q.user  = :user')
            ->orderBy('q.updated')
            ->setParameter('user', $user)
            ->getQuery()
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        return $query->getResult();
    }

    /**
     * @return mixed
     */
    public function count($community)
    {
        return $this->_em->createQuery('SELECT COUNT(q.id) FROM AppBundle\Entity\CommunityQuestion q WHERE q.communityCategory = :community')->setParameter('community', $community)->getSingleScalarResult();
    }

    /**
     * @return mixed
     */
    public function countByUser(User $user)
    {
        return $this->_em->createQuery('SELECT COUNT(q.id) FROM AppBundle\Entity\CommunityQuestion q WHERE q.user = :user')->setParameter('user', $user)->getSingleScalarResult();
    }

    /**
     * @return mixed
     */
    public function countByCategory(CommunityCategory $category)
    {
        return $this->_em->createQuery('SELECT COUNT(q.id) FROM AppBundle\Entity\CommunityQuestion q WHERE q.communityCategory = :category')->setParameter('category', $category)->getSingleScalarResult();
    }
}
