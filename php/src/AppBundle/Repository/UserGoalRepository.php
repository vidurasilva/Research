<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Goal;
use AppBundle\Entity\GoalGroup;
use AppBundle\Entity\UserGoal;
use UserBundle\Entity\User;

/**
 * UserGoalRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserGoalRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Get failed goals for user
     *
     * @param User $user
     *
     * @return array
     */
    public function getFailedGoals(User $user)
    {
        $query = $this->createQueryBuilder('u')
            ->select('u')
            ->andWhere('u.user = :user')
            ->andWhere('u.finished = :null')
            ->andWhere('u.endDate < :now')
            ->andWhere('u.show_in_dashboard = :true')
            ->setParameters([
                'user' => $user,
                'null' => 0,
                'now'  => new \DateTime(),
                'true' => true,
            ])
            ->getQuery();

        $failedGoals = [];
        /** @var UserGoal $userGoal */
        foreach ($query->getResult() as $userGoal) {
            $failedGoals[] = $userGoal->getGoal();
        }

        return $failedGoals;
    }

    /**
     * Get failed user goals for user
     * @param User $user
     * @return array
     */
    public function getFailedUserGoals(User $user)
    {
        $qb = $this->createQueryBuilder('u')
            ->select('u');

        $qb->where('u.user = :user')
            ->andWhere('u.finished = :false')
            ->andWhere('u.status = :goalFailed AND u.show_in_dashboard = :true')
            ->setParameters([
                'user'       => $user,
                'false'      => 0,
                //'now'        => new \DateTime(),
                'true'       => true,
                'goalFailed' => UserGoal::STATUS_FAILED,
            ]);

        $failedUserGoals = [];

        $result = $qb->getQuery()->getResult();

        /** @var UserGoal $userGoal */
        foreach ($result as $userGoal) {
            $failedUserGoals[] = $userGoal;
        }

        return $failedUserGoals;
    }

	/**
	 * Get succeeded goals for user
	 *
	 * @param User $user
	 *
	 * @return Goal[]
	 */
	public function getSucceededGoals(User $user)
	{
		$query = $this->createQueryBuilder('u')
			->select('u')
			->andWhere('u.user = :user')
			->andWhere('u.finished = :finished')
			->andWhere('u.status = :status')
			->andWhere('u.show_in_dashboard = :true')
			->setParameters([
				'user' => $user,
				'finished' => 1,
				'status' => UserGoal::STATUS_COMPLETED,
				'true' => true,
			])
			->getQuery();

		$succeededGoals = [];
		/** @var UserGoal $userGoal */
		foreach ($query->getResult() as $userGoal) {
			$succeededGoals[] = $userGoal->getGoal();
		}

		return $succeededGoals;
	}

	/**
	 * Get succeeded user goals for user
	 * @param User $user
	 * @return array
	 */
	public function getSucceededUserGoals(User $user)
	{
		$qb = $this->createQueryBuilder('u')
			->select('u');

		$qb->where('u.user = :user')
			->andWhere('u.finished = :finished')
			->andWhere('u.status = :status')
			->andWhere('u.show_in_dashboard = :true')
			->setParameters([
				'user'       => $user,
				'finished'      => 1,
				'status' => UserGoal::STATUS_COMPLETED,
				'true'       => true,
			]);

		$succeededUserGoals = [];

		$result = $qb->getQuery()->getResult();

		/** @var UserGoal $userGoal */
		foreach ($result as $userGoal) {
			$succeededUserGoals[] = $userGoal;
		}

		return $succeededUserGoals;
	}

    /**
     * Get all failed goals
     * @return array
     */
    public function getAllFailedGoals()
    {
        $query = $this->createQueryBuilder('u')
            ->select('u')
            ->andWhere('u.finished = :null')
            ->andWhere('u.status = :status')
            ->andWhere('u.active = :active')
            ->andWhere('u.transactionAttempts < :attempts')
            ->setParameters([
                'null'     => 0,
                'active'   => 1,
                'status'   => UserGoal::STATUS_FAILED,
                'attempts' => \AppBundle\Service\UserGoal::MAX_TRANSACTION_ATTEMPTS
            ])
            ->getQuery();

        $failedGoals = [];
        /** @var UserGoal $userGoal */
        foreach ($query->getResult() as $userGoal) {
            $failedGoals[] = $userGoal;
        }

        return $failedGoals;
    }

    /**
     * Searches for goals that are failed or should be succeeded
	 *
	 * @return UserGoal[]
     */
    public function findGoalsToMark()
    {
        $query = $this->createQueryBuilder('u')
            ->select('u')
            ->andWhere('u.finished = :null')
            ->andWhere('u.endDate < :now')
            ->andWhere('u.status != :status_failed')
            ->andWhere('u.status != :status_completed')
            ->andWhere('u.active = :active')
            ->setParameters([
                'null'             => 0,
                'active'           => 1,
                'now'              => new \DateTime(),
                'status_failed'    => UserGoal::STATUS_FAILED,
                'status_completed' => UserGoal::STATUS_COMPLETED
            ])
            ->getQuery();

        $foundGoals = [];
        /** @var UserGoal $userGoal */
        foreach ($query->getResult() as $userGoal) {
			$foundGoals[] = $userGoal;
        }

        return $foundGoals;
    }

    /**
     * Get all user goals with distinct
     * @param User $user
     * @return array
     */
    public function findAllUserGoals(User $user)
    {
        $query = $this->createQueryBuilder('u')
            ->select('u')
            ->leftJoin('u.goal', 'g')
            ->andWhere('u.user = :user')
            ->setParameters([
                'user' => $user
            ])
            ->getQuery();

        $failedUserGoals = [];
        /** @var UserGoal $userGoal */
        foreach ($query->getResult() as $userGoal) {
            $failedUserGoals[] = $userGoal;
        }

        return $failedUserGoals;
    }

	/**
	 * Find all users joining a specific group goal
	 *
	 * @param Goal $goal
	 * @param GoalGroup $goalGroup
	 * @return array
	 */
    public function findGroupGoalUsers(Goal $goal, GoalGroup $goalGroup)
	{
		$query = $this->createQueryBuilder('u')
			->select('u')
			->andWhere('u.goal = :goal')->setParameter('goal', $goal->getId())
			->andWhere('u.group = :group')->setParameter('group', $goalGroup->getId())
			->getQuery();

		$userGoals = array();
		/** @var UserGoal $userGoal */
		foreach ($query->getResult() as $userGoal) {
			$userGoals[] = $userGoal;
		}

		return $userGoals;
	}

	/**
	 * Find all active user goals
	 *
	 * @return array
	 */
	public function findActiveUserGoals($ignoreEndDate = false)
	{
	    if ($ignoreEndDate) {
            $query = $this->createQueryBuilder('u')
                ->select('u')
                ->andWhere('u.finished = :null')
                ->andWhere('u.status != :status_failed')
                ->andWhere('u.status != :status_completed')
                ->andWhere('u.active = :active')
                ->setParameters([
                    'null'             => 0,
                    'active'           => 1,
                    'status_failed'    => UserGoal::STATUS_FAILED,
                    'status_completed' => UserGoal::STATUS_COMPLETED
                ])
                ->getQuery();
        } else {
            $query = $this->createQueryBuilder('u')
                ->select('u')
                ->andWhere('u.finished = :null')
                ->andWhere('u.endDate >= :now')
                ->andWhere('u.status != :status_failed')
                ->andWhere('u.status != :status_completed')
                ->andWhere('u.active = :active')
                ->setParameters([
                    'null'             => 0,
                    'active'           => 1,
                    'now'              => new \DateTime(),
                    'status_failed'    => UserGoal::STATUS_FAILED,
                    'status_completed' => UserGoal::STATUS_COMPLETED
                ])
                ->getQuery();
        }


		$foundGoals = [];
		/** @var UserGoal $userGoal */
		foreach ($query->getResult() as $userGoal) {
			$foundGoals[] = $userGoal;
		}

		return $foundGoals;
	}

	/**
	 * Find all global active user goals
	 *
	 * @return array
	 */
	public function findGlobalActiveUserGoals()
	{
	            $query = $this->createQueryBuilder('u')
                ->select('u')
                ->andWhere('u.finished = :null')
                ->andWhere('u.status != :status_failed')
                ->andWhere('u.status != :status_completed')
                ->andWhere('u.active = :active')
	            ->andWhere('u.globalStake = true')
                ->setParameters([
                    'null'             => 0,
                    'active'           => 1,
                    'status_failed'    => UserGoal::STATUS_FAILED,
                    'status_completed' => UserGoal::STATUS_COMPLETED
                ])
                ->getQuery();


		$foundGoals = [];
		/** @var UserGoal $userGoal */
		foreach ($query->getResult() as $userGoal) {
			$foundGoals[] = $userGoal;
		}

		return $foundGoals;
	}
}
